<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wabi Sabi</title>
  
  <link href="/m/atom.xml" rel="self"/>
  
  <link href="http://benja.info/"/>
  <updated>2016-06-14T15:03:42.531Z</updated>
  <id>http://benja.info/</id>
  
  <author>
    <name>BenjaminXi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>页面调度算法详解</title>
    <link href="http://benja.info/2016/06/14/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://benja.info/2016/06/14/页面调度算法详解/</id>
    <published>2016-06-14T13:31:22.000Z</published>
    <updated>2016-06-14T15:03:42.531Z</updated>
    
    <content type="html">&lt;h2 id=&quot;LFU（Least-frequently-used）最少使用算法&quot;&gt;&lt;a href=&quot;#LFU（Least-frequently-used）最少使用算法&quot; class=&quot;headerlink&quot; title=&quot;LFU（Least frequently used）最少使用算法&quot;&gt;&lt;/a&gt;LFU（Least frequently used）最少使用算法&lt;/h2&gt;&lt;p&gt;缓存算法（也叫缓存置换算法）的一种。缓存算法就是当缓存已满时，清理掉旧的页面为新的页面腾出空间的算法。不同的缓存算法区别在于清理的规则不同。LFU就是清理掉使用频率最低的页面。举例来说，&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;如下图所示，我们有10个页面，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第一行为进入缓存的10个页面，而缓存空间只能存放3个页面，当页面2进入缓存，没问题，3和4依次进入。当页面2再次进入，频次加1。页面1进入，页面频次最高，保留；页面4和页面3频次都为1，由于页面4最后进入，保留，所以页面3替换为页面1。页面3进入，注意此时频次为1，所以页面4替换为页面3。依次类推。最后的缓存为页面2,4,3。&lt;/p&gt;
&lt;p&gt;此算法有个问题，页面2始终霸占着缓存，导致了资源的浪费，这是由于频次最高的页面我们却很少使用，而新进入的页面又很快地被移除。所以就有了该算法的改进LRU。&lt;/p&gt;
&lt;h2 id=&quot;LRU-Least-recently-used-最近最少使用算法&quot;&gt;&lt;a href=&quot;#LRU-Least-recently-used-最近最少使用算法&quot; class=&quot;headerlink&quot; title=&quot;LRU(Least recently used) 最近最少使用算法&quot;&gt;&lt;/a&gt;LRU(Least recently used) 最近最少使用算法&lt;/h2&gt;&lt;p&gt;LRU的清理规则是清理最近最少使用的页面。LRU就很好的解决了上面的问题。还是相同的页面进入：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;2&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;th&gt;7&lt;/th&gt;
&lt;th&gt;5&lt;/th&gt;
&lt;th&gt;4&lt;/th&gt;
&lt;th&gt;3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;前4次和上面一样，就不再解释了。当页面1进入，页面2为最新，页面4其次，页面3最老，所以替换掉页面3，这个替换规则是替换掉最老的页面。当页面3进入，页面4此时为最老，替换掉。依次类推。最终的缓存为页面3,5，4。可以看到，这三个页面是最后进入的页面，所以LRU留下的页面为最新的页面。&lt;/p&gt;
&lt;h2 id=&quot;FIFO（First-in，first-out）先进先出算法&quot;&gt;&lt;a href=&quot;#FIFO（First-in，first-out）先进先出算法&quot; class=&quot;headerlink&quot; title=&quot;FIFO（First-in，first-out）先进先出算法&quot;&gt;&lt;/a&gt;FIFO（First-in，first-out）先进先出算法&lt;/h2&gt;&lt;p&gt;低开销算法。开源系统将页面排成队列，新进入的页面排在最后，最老的页面排在最前。当页面需要清理时，先选择队列最前的页面。由于该算法较为简单和直观，在实际中很少应用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;LFU（Least-frequently-used）最少使用算法&quot;&gt;&lt;a href=&quot;#LFU（Least-frequently-used）最少使用算法&quot; class=&quot;headerlink&quot; title=&quot;LFU（Least frequently used）最少使用算法&quot;&gt;&lt;/a&gt;LFU（Least frequently used）最少使用算法&lt;/h2&gt;&lt;p&gt;缓存算法（也叫缓存置换算法）的一种。缓存算法就是当缓存已满时，清理掉旧的页面为新的页面腾出空间的算法。不同的缓存算法区别在于清理的规则不同。LFU就是清理掉使用频率最低的页面。举例来说，
    
    </summary>
    
      <category term="算法" scheme="http://benja.info/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="缓存算法" scheme="http://benja.info/tags/%E7%BC%93%E5%AD%98%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo利用swiftype为landscape-plus添加站内搜索</title>
    <link href="http://benja.info/2016/06/06/Hexo%E5%88%A9%E7%94%A8swiftype%E4%B8%BAlandscape-plus%E6%B7%BB%E5%8A%A0%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    <id>http://benja.info/2016/06/06/Hexo利用swiftype为landscape-plus添加站内搜索/</id>
    <published>2016-06-06T08:41:37.000Z</published>
    <updated>2016-06-07T12:30:22.756Z</updated>
    
    <content type="html">&lt;h2 id=&quot;swiftype-创建搜索引擎&quot;&gt;&lt;a href=&quot;#swiftype-创建搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;swiftype 创建搜索引擎&quot;&gt;&lt;/a&gt;swiftype 创建搜索引擎&lt;/h2&gt;&lt;p&gt;这部分网上的教程很多，按照&lt;a href=&quot;https://swiftype.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swiftype&lt;/a&gt;官网的指引就可以完成，由于官网的页面经常更新，就不帖图了，走到最后一步，出现install code，就可以进行下面的步骤了。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;hexo的landscape-plus主题配置&quot;&gt;&lt;a href=&quot;#hexo的landscape-plus主题配置&quot; class=&quot;headerlink&quot; title=&quot;hexo的landscape-plus主题配置&quot;&gt;&lt;/a&gt;hexo的landscape-plus主题配置&lt;/h2&gt;&lt;p&gt;由于网上暂时还没有&lt;a href=&quot;https://github.com/xiangming/landscape-plus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;landscape-plus&lt;/a&gt;的站内搜索配置教程，所以贴出本教程供大家参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;\themes\landscpe-plus_config.yml添加如下代码： &lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swift_search:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable: true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;\source\新建search文件夹，在\source\search\新建index.md,添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;layout: search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;----&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在\themes\landscape-plus\layout_partial\header.ejs文件中的代码块&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div id=&amp;quot;search-form-wrap&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;后面添加如下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% if (theme.swift_search.enable)&amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;form class=&amp;quot;search&amp;quot; action=&amp;quot;&amp;lt;%- config.root %&amp;gt;search/index.html&amp;quot; method=&amp;quot;get&amp;quot; accept-charset=&amp;quot;utf-8&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;search&amp;quot; class=&amp;quot;st-default-search-input&amp;quot; maxlength=&amp;quot;20&amp;quot; placeholder=&amp;quot;search&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;% &amp;#125; else &amp;#123; %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在\themes\landscape-plus\layout_partial\下新建search.ejs，添加如下代码,注意更换你的install code：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;% if(theme.swift_search.enable) { %&amp;gt;
&amp;lt;div  id=&amp;quot;container&amp;quot; class=&amp;quot;page&amp;quot;&amp;gt;
&amp;lt;div id=&amp;quot;st-results-container&amp;quot; class=&amp;quot;st-search-container&amp;quot; style=&amp;quot;width:80%&amp;quot;&amp;gt;正在加载搜索结果，请稍等。&amp;lt;/div&amp;gt;
&amp;lt;style&amp;gt;.st-result-text {
background: #fafafa;
display: block;
border-left: 0.5em solid #ccc;
-webkit-transition: border-left 0.45s;
-moz-transition: border-left 0.45s;
-o-transition: border-left 0.45s;
-ms-transition: border-left 0.45s;
transition: border-left 0.45s;
padding: 0.5em;
}
@media only screen and (min-width: 768px) {
.st-result-text {
  padding: 1em;
}
}
.st-result-text:hover {
border-left: 0.5em solid #ea6753;
}
.st-result-text h3 a{
color: #2ca6cb;
line-height: 1.5;
font-size: 22px;
}
.st-snippet em {
font-weight: bold;
color: #ea6753;
}&amp;lt;/style&amp;gt;
&amp;lt;！--下面的代码要换成swiftype的install code--！&amp;gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
(function(w,d,t,u,n,s,e){w[&amp;apos;SwiftypeObject&amp;apos;]=n;w[n]=w[n]||function(){
(w[n].q=w[n].q||[]).push(arguments);};s=d.createElement(t);
e=d.getElementsByTagName(t)[0];s.async=1;s.src=u;e.parentNode.insertBefore(s,e);
})(window,document,&amp;apos;script&amp;apos;,&amp;apos;//s.swiftypecdn.com/install/v2/st.js&amp;apos;,&amp;apos;_st&amp;apos;);

_st(&amp;apos;install&amp;apos;,&amp;apos;RUSAgTB9J3nET_uNMqyj&amp;apos;,&amp;apos;2.0.0&amp;apos;);
&amp;lt;/script&amp;gt;
&amp;lt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;在\themes\landscape-plus\layout_partial\footer.ejs，在最后一个标签之前把install code粘贴进去，就是上面4中script部分。&lt;br&gt;&lt;/li&gt;
&lt;li&gt;然后就是hexo g和hexo d了，祝大家成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JerryFu’s Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;swiftype-创建搜索引擎&quot;&gt;&lt;a href=&quot;#swiftype-创建搜索引擎&quot; class=&quot;headerlink&quot; title=&quot;swiftype 创建搜索引擎&quot;&gt;&lt;/a&gt;swiftype 创建搜索引擎&lt;/h2&gt;&lt;p&gt;这部分网上的教程很多，按照&lt;a href=&quot;https://swiftype.com/&quot;&gt;swiftype&lt;/a&gt;官网的指引就可以完成，由于官网的页面经常更新，就不帖图了，走到最后一步，出现install code，就可以进行下面的步骤了。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://benja.info/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://benja.info/tags/Hexo/"/>
    
      <category term="swiftype" scheme="http://benja.info/tags/swiftype/"/>
    
      <category term="landscape-plus" scheme="http://benja.info/tags/landscape-plus/"/>
    
      <category term="站内搜索" scheme="http://benja.info/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>产品元认知</title>
    <link href="http://benja.info/2016/06/04/%E4%BA%A7%E5%93%81%E5%85%83%E8%AE%A4%E7%9F%A5/"/>
    <id>http://benja.info/2016/06/04/产品元认知/</id>
    <published>2016-06-04T08:38:59.000Z</published>
    <updated>2016-06-07T12:29:58.465Z</updated>
    
    <content type="html">&lt;p&gt;题外话  &lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这周花6.5个小时看完了启示录，对产品经理有了模糊的认识。刚开始接触这本书，是本着了解产品经理的需求，再加上很多伟大的产品经理的光环。回想过往，那些产品经理的发布会总是让人兴奋，产品的魅力不止其本身，是产品经理为其注入灵魂，定义产品。这本书讲的就是定义产品之路上要面对的人和事。&lt;/p&gt;
&lt;p&gt;产品三板斧&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;这本书给我的，是框架式的认知。&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;从人员、流程和产品三个部分，讲述了产品团队、产品开发和产品特征。在人员这部分，带给我的是颠覆性的认识，产品管理不是产品营销，产品管理也不是项目管理。此外，产品团队中产品管理与产品设计、软件开发是怎样的关系也很重要。其实，人员这一部分，概括为一点，是产品经理要与团队中的其他角色的分工，要求的是产品经理的团队合作能力。&lt;/p&gt;
&lt;p&gt;这本书给我的，是框架式的认知。从人员、流程和产品三个部分，讲述了产品团队、产品开发和产品特征。在人员这部分，带给我的是颠覆性的认识，产品管理不是产品营销，产品管理也不是项目管理。此外，产品团队中产品管理与产品设计、软件开发是怎样的关系也很重要。其实，人员这一部分，概括为一点，是产品经理要与团队中的其他角色的分工，要求的是产品经理的团队合作能力。&lt;/p&gt;
&lt;p&gt;在流程这部分，讲的产品开发的流程。软件开发有两个阶段：定义产品和开发产品。第一阶段探索产品，第二个阶段强调执行。定义产品阶段，包含三步，第一步评估产品机会，这一步只讨论待解决的问题，不涉及具体解决方案。要讨论的问题有产品的价值、目标市场、竞争优势、营销策略等等。第二步就是定义产品，这一步涉及找出解决方案，与用户体验设计师制作产品原型。第三步就是验证产品，包括通过真实用户验证产品的价值和可用性，和开发人员验证产品的可行性。产品经理负责的定义产品阶段已经完成，剩下的就是交给开发团队按照最终的产品原型开发产品，项目管理则负责开发阶段的计划和执行。&lt;/p&gt;
&lt;p&gt;在产品这部分，讲的是产品的吸引力法则。优秀的产品都是一样的，都是有共性的。苹果作为近三十年最优秀的科技产品，有很多值得学习的经验，我把她总结为四层服务模型，从底层到顶层依次为硬件、软件、用户体验和情感。具体来说，底层为上一层服务，最终的目的是满足用户的情感需求。要想抓住用户的情感需求，就得关注那些情感需求最强烈的消费者。非理性消费者作为大众群体中情绪最强烈的群体，当孤独、愤怒的情绪放大后，会导致非理性的消费行为。从马斯洛需求层次分析理论来讲，越是能抓住底层的需求，越是能创造出有吸引力的产品。满足情感需求讲的是产品的价值，除此之外，产品的有用性体现在用户体验设计上。好的用户体验是既实用，又美观，这就需要好的交互设计和视觉设计。&lt;/p&gt;
&lt;p&gt;产品之路，才刚刚开始。想要的越多，得到的越少。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      启示录读后感
    
    </summary>
    
      <category term="产品" scheme="http://benja.info/categories/%E4%BA%A7%E5%93%81/"/>
    
    
      <category term="产品" scheme="http://benja.info/tags/%E4%BA%A7%E5%93%81/"/>
    
      <category term="启示录" scheme="http://benja.info/tags/%E5%90%AF%E7%A4%BA%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>互联网协议浅析</title>
    <link href="http://benja.info/2016/06/01/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE%E6%B5%85%E6%9E%90/"/>
    <id>http://benja.info/2016/06/01/互联网协议浅析/</id>
    <published>2016-05-31T16:00:00.000Z</published>
    <updated>2016-06-07T12:29:08.788Z</updated>
    
    <content type="html">&lt;p&gt;学通信已有5年有余，计算机网络虽在大三为应付考试，理解并不深。当初也是为了学好这门功课，硬是在亚洲最长的图书馆里啃着一本巨厚的《TCP/IP协议族》。&lt;/p&gt;
&lt;p&gt;最近搞出了一个博客benja.info，欣喜有余，总是不由自主地在地址栏敲入这几个英文字母，看看会发生什么神奇的事情。虽早已知道会发生什么，但当她弹出的那一刻，还是会欣喜不已。&lt;/p&gt;
&lt;p&gt;时间过滤后的才是精华，这句话用在此处也很恰当。当初厚厚的计算机网络，现在想起来的也就是OSI参考模型和5层网络协议这组关键词能留在记忆中。那不妨顺着这个框架走下去，聊聊今天的理解。&lt;/p&gt;
&lt;p&gt;互联网的5层模型，从底层到高层分别为物理层，数据链路层，网络层，传输层和应用层。那么我们不禁要问，为什么是5层，而不是6层、7层？这5层都是干什么的，可以拿掉一个么？&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;带着这些问题，我们从最简单的点到点模型开始浅析。一台电脑要与另一台电脑通信，我们可以用一根网线来连接，也可以通过无线来连接，这种有发送方和接收方是一对一的，就是物理层要实现的功能，只管发送0和1的比特信号。&lt;/p&gt;
&lt;p&gt;如果有三台电脑要相互通信，单纯利用网线已经无法实现，就得考虑如何将比特信号发送给指定电脑，那么就需要写入接收方的地址。每台主机都有一个网卡，网卡的MAC地址就是唯一定义的地址，是固定不变的。那好了，有了MAC地址，我们就可以发送数据包了，我们习惯在数据报的头部插入地址，尾部插入数据。有了MAC地址，如何发送给接受者呢？采用广播的方法给子网内部的所有主机发送，主机通过比较来判断是否接受。这就是数据链路层。&lt;/p&gt;
&lt;p&gt;当电脑的数量越来越多，这种广播的方式就有点低效和浪费网络资源了。电脑就开始形成各个小的网络，成为子网，而MAC地址本身不可更改的特性造就了其局限性，发明了网络地址来定义主机，也就是IP地址。IP地址有两部分组成，前面代表子网号，后面代表主机号。IP协议的一个作用就是为计算机分配IP地址，另一个作用就是确定IP地址归属与哪个子网。后者依赖于另一参数，叫做子网掩码。只有当两个IP地址与子网掩码进行与运算后，结果相同才属于一个子网。那么，当一台电脑要与另一台电脑通信时，知道IP地址是不够的，还需要知道MAC地址，怎么由IP地址得到MAC地址呢？当一个子网内部时，使用ARP协议（地址解析协议）；当不在一个子网中，让网关去处理。这就是网络层。&lt;/p&gt;
&lt;p&gt;当一台电脑能够连接到另一台电脑时，我们就要考虑程序间是如何通信的。计算机都是多进程处理，一边聊QQ，一边浏览网页，如何确保接收到的数据包是给QQ呢，还是Chrome呢？这是我们就需要一个参数来定义进程间的通信，就是端口号。一种通信方式是把端口号放入数据报中，就可以进行传输，这种不可靠的传输成为UDP协议传输。还有一种为协议引入了确认机制，就是著名的三次握手协议，TCP协议，其实就是有确认机制的UDP。这就是传输层。&lt;/p&gt;
&lt;p&gt;当应用程序能够通过传输协议收到数据包，就可以解读了。但是数据格式各种各种，就需要一套规范，不同的应用程序就有不同的数据规范，这就是应用层。比如Email，WWW等。&lt;/p&gt;
&lt;p&gt;举例来说，当我们要访问benja.info时，地址栏敲入http：//benja.info，这种格式为URL格式，前面的http协议是超文本传送协议，后面的benja.info为域名地址。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;浏览器会分析URL链接，向DNS服务器请求解析benja.info的域名，这里的DNS服务器是DNSPod。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DNSPod会返回一个IP地址，这个地址github pages，我么在这上面架设了仓库，存放博客程序。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器与服务器建立TCP连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器发出请求显示页面的命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;github pages服务器给出响应，把html文件发送给浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;释放TCP连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浏览器显示html文本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;阮一峰的&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;互联网协议入门（二）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      看了阮一峰的互联网协议入门，分别从系统和用户的角度解读了互联网中的两台主机是如何通信的，简单易懂，有感而发。
    
    </summary>
    
      <category term="网络" scheme="http://benja.info/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="协议" scheme="http://benja.info/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
</feed>
